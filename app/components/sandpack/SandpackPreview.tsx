import { useState } from 'react';
import {
  SandpackProvider,
  SandpackLayout,
  SandpackCodeEditor,
  SandpackPreview as SandpackPreviewWindow,
  SandpackFileExplorer,
  useSandpack,
  SandpackConsole,
} from '@codesandbox/sandpack-react';
import { web9Theme } from './web9Theme';

// Sample Next.js project files
const DEFAULT_NEXTJS_FILES = {
  '/app/page.tsx': `export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <div className="z-10 max-w-5xl w-full items-center justify-between font-mono text-sm flex">
        <p className="fixed left-0 top-0 flex w-full justify-center border-b border-gray-300 bg-gradient-to-b from-zinc-200 pb-6 pt-8 backdrop-blur-2xl dark:border-neutral-800 dark:bg-zinc-800/30 dark:from-inherit">
          Get started by editing&nbsp;
          <code className="font-mono font-bold">app/page.tsx</code>
        </p>
      </div>

      <div className="relative flex place-items-center">
        <h1 className="text-4xl font-bold">Welcome to Next.js</h1>
      </div>

      <div className="mb-32 grid text-center lg:max-w-5xl lg:w-full lg:mb-0 lg:grid-cols-3 lg:text-left">
        <div className="group rounded-lg border border-transparent px-5 py-4 transition-colors border-gray-300 bg-gray-100 dark:border-neutral-700 dark:bg-neutral-800/30">
          <h2 className="mb-3 text-2xl font-semibold">
            Docs
          </h2>
          <p className="m-0 max-w-[30ch] text-sm opacity-50">
            Find in-depth information about Next.js features and API.
          </p>
        </div>
      </div>
    </main>
  );
}`,
  '/app/layout.tsx': `import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Next.js App',
  description: 'Generated by web9',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}`,
  '/app/globals.css': `@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: rgb(var(--background-rgb));
}`,
  '/components/button.tsx': `import { ButtonHTMLAttributes } from 'react';

interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'outline';
  size?: 'sm' | 'md' | 'lg';
}

export default function Button({
  children,
  variant = 'primary',
  size = 'md',
  className,
  ...props
}: ButtonProps) {
  const baseStyles = 'inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2';
  
  const variantStyles = {
    primary: 'bg-blue-600 text-white hover:bg-blue-700',
    secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300',
    outline: 'border border-gray-300 bg-transparent hover:bg-gray-100',
  };
  
  const sizeStyles = {
    sm: 'h-8 px-3 text-xs',
    md: 'h-10 px-4 text-sm',
    lg: 'h-12 px-6 text-base',
  };
  
  const classes = \`\${baseStyles} \${variantStyles[variant]} \${sizeStyles[size]} \${className || ''}\`;
  
  return (
    <button className={classes} {...props}>
      {children}
    </button>
  );
}`,
  '/components/card.tsx': `interface CardProps {
  title?: string;
  children: React.ReactNode;
  className?: string;
}

export default function Card({ title, children, className = '' }: CardProps) {
  return (
    <div className={\`bg-white shadow rounded-lg overflow-hidden \${className}\`}>
      {title && (
        <div className="border-b border-gray-200 px-4 py-3">
          <h3 className="text-lg font-medium text-gray-900">{title}</h3>
        </div>
      )}
      <div className="px-4 py-5">{children}</div>
    </div>
  );
}`,
};

const SandpackTabs = () => {
  const { sandpack } = useSandpack();
  const [activeTab, setActiveTab] = useState<'preview'>('preview');

  return (
    <div className='flex flex-col h-full'>
      <div className='flex border-b border-gray-700'>
        <button
          className={`px-4 py-2 text-sm font-medium ${
            activeTab === 'preview'
              ? 'border-b-2 border-white text-white'
              : 'text-gray-400 hover:text-gray-200'
          }`}
          onClick={() => setActiveTab('preview')}
        >
          Preview
        </button>
        {/* <button
          className={`px-4 py-2 text-sm font-medium ${
            activeTab === 'console'
              ? 'border-b-2 border-white text-white'
              : 'text-gray-400 hover:text-gray-200'
          }`}
          onClick={() => setActiveTab('console')}
        >
          Console
        </button> */}
      </div>
      <div className='flex-1 overflow-auto bg-white'>
        {activeTab === 'preview' ? (
          <SandpackPreviewWindow showNavigator={true} />
        ) : (
          <SandpackConsole />
        )}
      </div>
    </div>
  );
};

interface SandpackPreviewProps {
  files?: Record<string, string>;
  activePath?: string;
}

export default function SandpackPreview({
  files = DEFAULT_NEXTJS_FILES,
  activePath = '/app/page.tsx',
}: SandpackPreviewProps) {
  return (
    <div className='h-full'>
      <SandpackProvider
        template='nextjs'
        theme={web9Theme}
        files={files}
        options={{
          activeFile: activePath,
          visibleFiles: Object.keys(files),
          classes: {
            'sp-layout': 'custom-layout',
            'sp-tabs': 'custom-tabs',
          },
        }}
      >
        <SandpackLayout className='!border-0 !bg-[#1e1e1e] !rounded-none'>
          <div className='flex flex-col h-full overflow-hidden'>
            <div className='flex-1 flex'>
              <div className='w-48 border-r border-gray-800 bg-[#1e1e1e]'>
                <SandpackFileExplorer className='!bg-[#1e1e1e] !border-0' />
              </div>
              <div className='flex-1'>
                <SandpackCodeEditor
                  showTabs
                  showLineNumbers
                  showInlineErrors
                  wrapContent
                  closableTabs={false}
                />
              </div>
            </div>
            <div className='h-1/2 border-t border-gray-800 bg-[#1e1e1e]'>
              <SandpackTabs />
            </div>
          </div>
        </SandpackLayout>
      </SandpackProvider>
    </div>
  );
}
